package hw4;

import api.Card;
import api.Hand;
import api.IEvaluator;

/**
 * Evaluator for a hand containing (at least) two cards of the same rank.
 * The number of main cards is two.
 * 
 * The name of this evaluator is "One Pair".
 */
//Note: You must edit this declaration to extend AbstractEvaluator
//or to extend some other class that extends AbstractEvaluator

public class OnePairEvaluator implements IEvaluator 
{
  /**
   * Constructs the evaluator.
   * @param ranking
   *   ranking of this hand
   * @param totalCards
   *   number of cards in a hand
   */
	private int rank;
	
	private int num;
	
  public OnePairEvaluator(int ranking, int totalCards)
  {
	  rank = ranking;
	  num = totalCards;
    // TODO: call appropriate superclass constructor and 
    // perform other initialization
  }

@Override
public String getName() {
	// TODO Auto-generated method stub
	return "One Pair";
}

@Override
public int getRanking() {
	// TODO Auto-generated method stub
	return rank;
}

@Override
public int numMainCards() {
	// TODO Auto-generated method stub
	return 2;
}

@Override
public int totalCards() {
	// TODO Auto-generated method stub
	return num;
}

@Override
public boolean satisfiedBy(Card[] mainCards) {
	if(mainCards.length == numMainCards()){
		
	
		if(mainCards[0].getRank() == mainCards[1].getRank())
			return true;
	}
	
	/*if(mainCards.length == numMainCards())
	{
	
		
		for (int i = 0; i < mainCards.length; i++)
		{
			Card cur = mainCards[i];
			for(int j = i+1; j < mainCards.length; j++)
			{
				if(cur.compareTo(mainCards[j]) < 0)
				{
					Card temp = mainCards[j];
					mainCards[j] = cur;
					cur = temp;
				}
			}
		}
		
		for (int i = 0; i < mainCards.length-1; i++)
		{
			if(mainCards[i].getRank() == mainCards[i+1].getRank())
			{
				return true;
			}
		}
	}
	*/
	return false;
}

@Override
public boolean canSubsetSatisfy(Card[] allCards) {
	if(allCards.length >= numMainCards())
	{
	
		
		for (int i = 0; i < allCards.length; i++)
		{
			Card cur = allCards[i];
			for(int j = i+1; j < allCards.length; j++)
			{
				if(cur.compareTo(allCards[j]) < 0)
				{
					Card temp = allCards[j];
					allCards[j] = cur;
					cur = temp;
				}
			}
		}
		
		for (int i = 0; i < allCards.length-1; i++)
		{
			if(allCards[i].getRank() == allCards[i+1].getRank())
			{
				return true;
			}
		}
	}
	return false;
}

@Override
public Hand createHand(Card[] allCards, int[] subset) {
	Card[] mainCards = new Card[subset.length];
	Card[] sideCards = new Card[totalCards() - subset.length];
	
	for(int i = 0; i < subset.length; i++)
	{
		subCard[i] = allCards[subset[i]];
	}
	if(satisfiedBy(subCard)&&sub)
	{
		return subCard;
	}
	return null;
}

@Override
public Hand createBestHand(Card[] allCards) {
	// TODO Auto-generated method stub
	return null;
}
}
